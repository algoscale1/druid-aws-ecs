#
# Extensions
#

# This is not the full list of Druid extensions, but common ones that people often use. You may need to change this list
# based on your particular setup.
druid.extensions.loadList=[{{range $index, $service := .Values.config.common.druid.extensions.loadList}}{{if gt $index 0}}, {{end}}"{{.}}"{{end}}]

# If you have a different version of Hadoop, place your Hadoop client jar files in your hadoop-dependencies directory
# and uncomment the line below to point to your directory.
#druid.extensions.hadoopDependenciesDir=/my/dir/hadoop-dependencies

#
# Logging
#

# Log all runtime properties on startup. Disable to avoid logging properties on startup:
druid.startup.logging.logProperties={{.Values.config.common.druid.startup.logging.logProperties}}

#
# Zookeeper
#

druid.zk.service.host={{.Values.config.common.druid.zk.service.host}}
druid.zk.paths.base={{.Values.config.common.druid.zk.paths.base}}

#
# Metadata storage
#

druid.metadata.storage.type={{.Values.config.common.druid.metadata.storage.type}}
druid.metadata.storage.connector.connectURI={{.Values.config.common.druid.metadata.storage.connector.connectURI}}
{{- if eq .Values.config.common.druid.metadata.storage.type "derby" }}
druid.metadata.storage.connector.host={{.Values.config.common.druid.metadata.storage.connector.host}}
druid.metadata.storage.connector.port={{.Values.config.common.druid.metadata.storage.connector.port}}
{{- else }}
druid.metadata.storage.connector.user={{.Values.config.common.druid.metadata.storage.connector.user}}
druid.metadata.storage.connector.password={{.Values.config.common.druid.metadata.storage.connector.password}}
{{- end }}

#
# Deep storage
#

# For local disk (only viable in a cluster if this is a network mount):
druid.storage.type={{.Values.config.common.druid.storage.type}}
{{- if eq .Values.config.common.druid.storage.type "s3" }}
druid.storage.bucket={{.Values.config.common.druid.storage.bucket}}
druid.storage.baseKey={{.Values.config.common.druid.storage.baseKey}}
druid.s3.accessKey={{.Values.config.common.druid.s3.accessKey}}
druid.s3.secretKey={{.Values.config.common.druid.s3.secretKey}}
{{- else }}
druid.storage.storageDirectory={{.Values.config.common.druid.storage.storageDirectory}}
{{- end }}

#
# Indexing service logs
#

# For local disk (only viable in a cluster if this is a network mount):
druid.indexer.logs.type={{.Values.config.common.druid.indexer.logs.type}}
{{- if eq .Values.config.common.druid.indexer.logs.type "s3" }}
druid.indexer.logs.s3Bucket={{.Values.config.common.druid.indexer.logs.s3Bucket}}
druid.indexer.logs.s3Prefix={{.Values.config.common.druid.indexer.logs.s3Prefix}}
{{- else }}
druid.indexer.logs.directory={{.Values.config.common.druid.indexer.logs.directory}}
{{- end }}

#
# Service discovery
#

druid.selectors.indexing.serviceName={{.Values.config.common.druid.selectors.indexing.serviceName}}
druid.selectors.coordinator.serviceName={{.Values.config.common.druid.selectors.coordinator.serviceName}}

#
# Monitoring
#

druid.monitoring.monitors=[{{range $index, $service := .Values.config.common.druid.monitoring.monitors}}{{if gt $index 0}}, {{end}}"{{.}}"{{end}}]
# we use composing emitters to allow flexibility
druid.emitter=composing
druid.emitter.composing.emitters=[{{range $index, $service := .Values.config.common.druid.emitter.composing.emitters}}{{if gt $index 0}}, {{end}}"{{.}}"{{end}}]
druid.emitter.logging.logLevel={{.Values.config.common.druid.emitter.logging.logLevel}}


druid.emitter.http.recipientBaseUrl=http://devel-druid-monitoring:9090
druid.emitter.statsd.hostname=devel-druid-monitoring
druid.emitter.statsd.port=9125
druid.emitter.statsd.includeHost=true
druid.emitter.statsd.separator=.
druid.emitter.statsd.prefix=debug

# Storage type of double columns
# ommiting this will lead to index double as float at the storage layer

druid.indexing.doubleStorage={{.Values.config.common.druid.indexing.doubleStorage}}
